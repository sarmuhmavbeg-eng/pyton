1
import math

class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * self.radius**2

    def perimeter(self):
        return 2 * math.pi * self.radius

# Пример использования
c = Circle(5)
print("Площадь:", c.area())
print("Периметр:", c.perimeter())


2

from datetime import date

class Person:
    def __init__(self, name, country, birth_date):  # birth_date: "YYYY-MM-DD"
        self.name = name
        self.country = country
        self.birth_date = date.fromisoformat(birth_date)

    def age(self):
        today = date.today()
        return today.year - self.birth_date.year - ((today.month, today.day) < (self.birth_date.month, self.birth_date.day))

# Пример
p = Person("Ali", "Uzbekistan", "2000-03-15")
print(f"{p.name}, возраст: {p.age()} лет")


3
class Calculator:
    def add(self, a, b): return a + b
    def sub(self, a, b): return a - b
    def mul(self, a, b): return a * b
    def div(self, a, b):
        return a / b if b != 0 else "Ошибка: деление на ноль"

calc = Calculator()
print(calc.add(5, 3))   # 8
print(calc.div(10, 0))  # Ошибка


4
import math

class Shape:
    def area(self): pass
    def perimeter(self): pass

class Circle(Shape):
    def __init__(self, radius): self.radius = radius
    def area(self): return math.pi * self.radius**2
    def perimeter(self): return 2 * math.pi * self.radius

class Square(Shape):
    def __init__(self, side): self.side = side
    def area(self): return self.side**2
    def perimeter(self): return 4 * self.side

class Triangle(Shape):
    def __init__(self, a, b, c):
        self.a, self.b, self.c = a, b, c
    def perimeter(self): return self.a + self.b + self.c
    def area(self):
        s = self.perimeter() / 2
        return math.sqrt(s * (s - self.a) * (s - self.b) * (s - self.c))

# Пример
sq = Square(4)
print("Площадь квадрата:", sq.area())


5

class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

class BST:
    def __init__(self): self.root = None

    def insert(self, value):
        if not self.root:
            self.root = Node(value)
        else:
            self._insert(self.root, value)

    def _insert(self, current, value):
        if value < current.value:
            if current.left:
                self._insert(current.left, value)
            else:
                current.left = Node(value)
        else:
            if current.right:
                self._insert(current.right, value)
            else:
                current.right = Node(value)

    def search(self, value):
        return self._search(self.root, value)

    def _search(self, current, value):
        if not current: return False
        if current.value == value: return True
        if value < current.value:
            return self._search(current.left, value)
        else:
            return self._search(current.right, value)

# Пример
tree = BST()
for v in [7, 3, 9, 1, 5]:
    tree.insert(v)
print(tree.search(5))  # True


6

class Stack:
    def __init__(self): self.items = []
    def push(self, item): self.items.append(item)
    def pop(self): return self.items.pop() if self.items else "Стек пуст"
    def peek(self): return self.items[-1] if self.items else None

s = Stack()
s.push(10)
s.push(20)
print(s.pop())  # 20


7
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self): self.head = None

    def insert(self, data):
        new = Node(data)
        new.next = self.head
        self.head = new

    def display(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    def delete(self, key):
        current = self.head
        if current and current.data == key:
            self.head = current.next
            return
        prev = None
        while current and current.data != key:
            prev = current
            current = current.next
        if current: prev.next = current.next

ll = LinkedList()
ll.insert(10)
ll.insert(20)
ll.insert(30)
ll.display()
ll.delete(20)
ll.display()


8
class Cart:
    def __init__(self): self.items = {}

    def add(self, product, price, qty=1):
        if product in self.items:
            self.items[product]["qty"] += qty
        else:
            self.items[product] = {"price": price, "qty": qty}

    def remove(self, product):
        if product in self.items:
            del self.items[product]

    def total(self):
        return sum(item["price"] * item["qty"] for item in self.items.values())

cart = Cart()
cart.add("Apple", 2, 3)
cart.add("Banana", 1, 5)
print("Итого:", cart.total())


9
class Stack:
    def __init__(self): self.items = []
    def push(self, item): self.items.append(item)
    def pop(self): return self.items.pop() if self.items else "Стек пуст"
    def display(self): print(self.items)

s = Stack()
s.push(5)
s.push(10)
s.display()

10
class Queue:
    def __init__(self): self.items = []
    def enqueue(self, item): self.items.append(item)
    def dequeue(self): return self.items.pop(0) if self.items else "Очередь пуста"
    def display(self): print(self.items)

q = Queue()
q.enqueue(1)
q.enqueue(2)
q.display()
print(q.dequeue())

11

class BankAccount:
    def __init__(self, owner, balance=0):
        self.owner = owner
        self.balance = balance

    def deposit(self, amount): self.balance += amount
    def withdraw(self, amount):
        if amount <= self.balance:
            self.balance -= amount
        else:
            print("Недостаточно средств")

class Bank:
    def __init__(self): self.accounts = {}

    def add_account(self, owner, balance=0):
        self.accounts[owner] = BankAccount(owner, balance)

    def transfer(self, from_owner, to_owner, amount):
        if from_owner in self.accounts and to_owner in self.accounts:
            if self.accounts[from_owner].balance >= amount:
                self.accounts[from_owner].withdraw(amount)
                self.accounts[to_owner].deposit(amount)
                print(f"Перевод {amount} от {from_owner} к {to_owner}")
            else:
                print("Недостаточно средств")
        else:
            print("Счёт не найден")

bank = Bank()
bank.add_account("Ali", 1000)
bank.add_account("Vali", 500)
bank.transfer("Ali", "Vali", 200)
print(bank.accounts["Ali"].balance, bank.accounts["Vali"].balance)


12


