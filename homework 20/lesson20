import sqlite3
import pandas as pd

# 1. –ë–∞–∑–∞–Ω–∏ —É–ª–∞–π–º–∏–∑
conn = sqlite3.connect("chinook.db")

# -------------------------------
# üßæ 1. “≤–∞—Ä –±–∏—Ä –º–∏–∂–æ–∑–Ω–∏–Ω–≥ —É–º—É–º–∏–π —Å–∞—Ä—Ñ–∏
# -------------------------------
query_total_spent = """
SELECT 
    c.CustomerId,
    c.FirstName || ' ' || c.LastName AS FullName,
    SUM(i.Total) AS TotalSpent
FROM Customer c
JOIN Invoice i ON c.CustomerId = i.CustomerId
GROUP BY c.CustomerId
ORDER BY TotalSpent DESC;
"""

customer_spending = pd.read_sql_query(query_total_spent, conn)

print("üí∞ “≤–∞—Ä –±–∏—Ä –º–∏–∂–æ–∑–Ω–∏–Ω–≥ —É–º—É–º–∏–π —Å–∞—Ä—Ñ–∏:")
print(customer_spending.head(10), "\n")

# -------------------------------
# 2. –≠–Ω–≥ –∫—û–ø —Å–∞—Ä—Ñ–ª–∞–≥–∞–Ω 5 –º–∏–∂–æ–∑
# -------------------------------
top5_customers = customer_spending.head(5)

print("–≠–Ω–≥ –∫—û–ø —Å–∞—Ä—Ñ–ª–∞–≥–∞–Ω 5 –º–∏–∂–æ–∑:")
print(top5_customers, "\n")

# -------------------------------
# 3. “≤–∞—Ä–∏–¥ —Ç—É—Ä–∏ —Ç–∞“≥–ª–∏–ª–∏ ‚Äî –∞–ª—å–±–æ–º —ë–∫–∏ —Ç—Ä–µ–∫
# -------------------------------
# InvoiceLine ‚Äî “≥–∞—Ä –±–∏—Ä —Å–æ—Ç–∏–ª–≥–∞–Ω —Ç—Ä–µ–∫
# Track –≤–∞ Album –æ—Ä“õ–∞–ª–∏ –º–∞—ä–ª—É–º–æ—Ç–Ω–∏ –±–∏—Ä–ª–∞—à—Ç–∏—Ä–∞–º–∏–∑

query_tracks = """
SELECT
    i.InvoiceId,
    i.CustomerId,
    il.TrackId,
    t.AlbumId
FROM Invoice i
JOIN InvoiceLine il ON i.InvoiceId = il.InvoiceId
JOIN Track t ON il.TrackId = t.TrackId
"""

sales_df = pd.read_sql_query(query_tracks, conn)

# “≤–∞—Ä –±–∏—Ä –º–∏–∂–æ–∑ “õ–∞–π—Å–∏ –∞–ª—å–±–æ–º–¥–∞–Ω –Ω–µ—á–∞ —Ç—Ä–µ–∫ –æ–ª–≥–∞–Ω–∏–Ω–∏ “≥–∏—Å–æ–±–ª–∞–π–º–∏–∑
customer_album = (
    sales_df.groupby(["CustomerId", "AlbumId"])["TrackId"]
    .count()
    .reset_index(name="TracksPurchased")
)

# “≤–∞—Ä –±–∏—Ä –∞–ª—å–±–æ–º–¥–∞ –Ω–µ—á—Ç–∞ —Ç—Ä–µ–∫ –±–æ—Ä–ª–∏–≥–∏–Ω–∏ –∞–Ω–∏“õ–ª–∞–π–º–∏–∑
album_tracks = pd.read_sql_query(
    "SELECT AlbumId, COUNT(TrackId) AS TotalTracks FROM Track GROUP BY AlbumId;",
    conn
)

# –ë–∏—Ä–ª–∞—à—Ç–∏—Ä–∞–º–∏–∑
customer_album = customer_album.merge(album_tracks, on="AlbumId")

# –ê–≥–∞—Ä –º–∏–∂–æ–∑ –±–∞—Ä—á–∞ —Ç—Ä–µ–∫–ª–∞—Ä–Ω–∏ –æ–ª–≥–∞–Ω –±—û–ª—Å–∞ ‚Äî 'Full Album' –¥–µ–± “õ—û—è–º–∏–∑, –∞–∫—Å “≥–æ–ª–¥–∞ 'Single Tracks'
customer_album["PurchaseType"] = customer_album.apply(
    lambda x: "Full Album" if x["TracksPurchased"] == x["TotalTracks"] else "Single Tracks",
    axis=1
)

# “≤–∞—Ä –±–∏—Ä –º–∏–∂–æ–∑–Ω–∏–Ω–≥ —É–º—É–º–∏–π —Ö–∞—Ä–∏–¥ —Ç—É—Ä–∏–Ω–∏ –∞–Ω–∏“õ–ª–∞–π–º–∏–∑
customer_pref = (
    customer_album.groupby("CustomerId")["PurchaseType"]
    .apply(lambda x: "Full Album" if (x == "Full Album").any() else "Single Tracks")
    .reset_index()
)

# –§–æ–∏–∑ “≥–∏—Å–æ–±–ª–∞—à
total_customers = customer_pref["CustomerId"].nunique()
album_buyers = (customer_pref["PurchaseType"] == "Full Album").sum()
single_buyers = (customer_pref["PurchaseType"] == "Single Tracks").sum()

album_percent = round(album_buyers / total_customers * 100, 2)
single_percent = round(single_buyers / total_customers * 100, 2)

print("–ú–∏–∂–æ–∑–ª–∞—Ä –±—û–π–∏—á–∞ —Ö–∞—Ä–∏–¥ —Ç—É—Ä–∏ —Ç–∞“≥–ª–∏–ª–∏:")
print(f"–ê–ª—å–±–æ–º —Å–æ—Ç–∏–± –æ–ª–≥–∞–Ω–ª–∞—Ä: {album_percent}%")
print(f"–§–∞“õ–∞—Ç —Ç—Ä–µ–∫ —Å–æ—Ç–∏–± –æ–ª–≥–∞–Ω–ª–∞—Ä: {single_percent}%\n")

print("“≤–∞—Ä –±–∏—Ä –º–∏–∂–æ–∑ –±—û–π–∏—á–∞ –º–∞—ä–ª—É–º–æ—Ç:")
print(customer_pref.head())

# –ë–∞–∑–∞–Ω–∏ —ë–ø–∞–º–∏–∑
conn.close()
